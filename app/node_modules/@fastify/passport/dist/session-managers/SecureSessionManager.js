"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureSessionManager = void 0;
class SecureSessionManager {
    constructor(options, serializeUser) {
        var _a;
        this.clearSessionIgnoreFields = ['session'];
        if (typeof options === 'function') {
            this.serializeUser = options;
            this.key = 'passport';
            this.clearSessionOnLogin = true;
        }
        else if (typeof serializeUser === 'function') {
            this.serializeUser = serializeUser;
            this.key =
                (options && typeof options === 'object' && typeof options.key === 'string' && options.key) || 'passport';
            this.clearSessionOnLogin = (_a = options.clearSessionOnLogin) !== null && _a !== void 0 ? _a : true;
            this.clearSessionIgnoreFields = [...this.clearSessionIgnoreFields, ...(options.clearSessionIgnoreFields || [])];
        }
        else {
            throw new Error('SecureSessionManager#constructor must have a valid serializeUser-function passed as a parameter');
        }
    }
    async logIn(request, user) {
        const object = await this.serializeUser(user, request);
        if (this.clearSessionOnLogin && object) {
            if (request.session.regenerate) {
                await request.session.regenerate(this.clearSessionIgnoreFields);
            }
            else {
                const currentFields = request.session.data() || {};
                for (const field of Object.keys(currentFields)) {
                    if (this.clearSessionIgnoreFields.includes(field)) {
                        continue;
                    }
                    request.session.set(field, undefined);
                }
            }
        }
        if (request.session.regenerate) {
            await request.session.regenerate();
        }
        request.session.set(this.key, object);
    }
    async logOut(request) {
        request.session.set(this.key, undefined);
        if (request.session.regenerate) {
            await request.session.regenerate();
        }
    }
    getUserFromSession(request) {
        return request.session.get(this.key);
    }
}
exports.SecureSessionManager = SecureSessionManager;
